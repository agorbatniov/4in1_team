l = []
num_grades = int(input("Сколько оценок?"))

if num_grades <= 0:
    print("Ошибка: количество оценок должно быть больше нуля.")
else:
    for i in range(num_grades):
        l.append(int(input("Введите оценку ученика😗🥺🥰")))
    print(f"Средняя оценка ученика: {sum(l) / len(l)}")
0
def cal(grades):
    if not grades:
        return 0
    return sum(grades) / len(grades)

# Код, который нужно проверить
l = []
num_grades = int(input("Сколько оценок?"))

if num_grades <= 0:
    print("Ошибка: количество оценок должно быть больше нуля.")
else:
    for i in range(num_grades):
        l.append(int(input("Введите оценку ученика😗🥺🥰")))
    print(f"Средняя оценка ученика: {sum(l) / len(l)}")

def cal(grades):
    if not grades:
        return 0
    return sum(grades) / len(grades)

# Тестирование функции cal
try:
    # Тест 1: Пустой список
    assert cal([]) == 0, f"Ошибка в функции 'cal()'. Для пустого списка ответ должен быть {0}."
    
    # Тест 2: Один элемент в списке
    assert cal([10]) == 10, f"Ошибка в функции 'cal()'. Для списка [10] ответ должен быть {10}."
    
    # Тест 3: Несколько положительных оценок
    assert cal([2, 4, 6, 8]) == 5, f"Ошибка в функции 'cal()'. Для списка [2, 4, 6, 8] ответ должен быть {5}."
    
    # Тест 4: Отрицательные оценки
    assert cal([-1, -2, -3]) == -2, f"Ошибка в функции 'cal()'. Для списка [-1, -2, -3] ответ должен быть {-2}."
    
    print("Все тесты успешно пройдены.")
except AssertionError as e:
    print(f"Тест провален: {e}")# Тест 1: Проверка с несколькими оценками
grades_1 = [4, 5, 3, 4]
assert cal(grades_1) == 4.0, "Тест 1 не прошел"

# Тест 2: Проверка с одной оценкой
grades_2 = [5]
assert cal(grades_2) == 5.0, "Тест 2 не прошел"

# Тест 3: Проверка с пустым списком оценок (возвращается 0)
grades_3 = []
assert cale(grades_3) == 0, "Тест 3 не прошел"

# Тест 4: Проверка с разными оценками
grades_4 = [1, 2, 3, 4, 5]
assert cal(grades_4) == 3.0, "Тест 4 не прошел"

print("Все тесты пройдены успешно!")
